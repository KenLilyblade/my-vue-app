const { NodeSSH } = require('node-ssh') //sshËøûÊé•
const ora = require('ora') //ËøõÂ∫¶Êù°
const chalk = require('chalk') //logÈ¢úËâ≤ÊâìÂç∞
const inquirer = require('inquirer') //ÂëΩ‰ª§Ë°åÈÄâÊã©
const shell = require('shelljs') //ÂëΩ‰ª§Ë°åÊìç‰Ωú
const compressing = require('compressing') //Êñá‰ª∂ÂéãÁº©
const path = require('path')
const successLog = val => console.log(chalk.blue(`*********** ${val} ***********`))
const errorLog = val => console.log(chalk.red(val))
const SSH = new NodeSSH()
let config //ÈÖçÁΩÆÊñá‰ª∂

const distDir = path.resolve(__dirname, `../dist`)
const distZipPath = path.resolve(__dirname, `./dist.zip`)

// Â¶ÇÊûúÊ≤°ÊúâÈÖçÁΩÆÊñá‰ª∂ÈÄÄÂá∫ÂëΩ‰ª§Ë°å
try {
	config = require('./config.js')
} catch (error) {
	errorLog('ËØ∑ÈÖçÁΩÆconfig.js')
	process.exit()
}

//ÂëΩ‰ª§Ë°åÈÄâÊã©ÂèëÂ∏ÉÁéØÂ¢É
inquirer
	.prompt([
		{
			type: 'list',
			message: 'ËØ∑ÈÄâÊã©ÂèëÂ∏ÉÁéØÂ¢É',
			name: 'env',
			choices: [
				{ name: 'ÊµãËØïÁéØÂ¢É', value: 'development' },
				{ name: 'Ê≠£ÂºèÁéØÂ¢É', value: 'production' }
			]
		}
	])
	.then(async ({ env }) => {
		// ËÆæÁΩÆÂèëÂ∏ÉÁéØÂ¢É‰ø°ÊÅØ
		config = config[env]
		await checkConfig()
		await initUpload(env)
	})

const initUpload = async env => {
	successLog('üê≥ ÂºÄÂßãÈÉ®ÁΩ≤')
	await baling(env)
	await compressZip()
	await connectSSH()
	await cleanServerOldFile()
	await uploadDistFile()
	successLog('üê≥ ÈÉ®ÁΩ≤ÊàêÂäü')
	process.exit()
}

const checkConfig = async () => {
	Object.values(config).forEach(it => {
		if (!it) {
			errorLog('‚ùó ËØ∑ÈÖçÁΩÆconfig.js'), process.exit()
		}
	})
}

//ÊâìÂåÖ
const baling = async mode => {
	successLog('üê≥ ÂºÄÂßãÊûÑÂª∫‚Ä¶‚Ä¶')
	const { code } = await shell.exec(`npm run build:${mode === 'production' ? 'prod' : 'dev'}`)
	if (code !== 0) {
		errorLog('‚ùó ÊûÑÂª∫Â§±Ë¥•')
		process.exit()
	}
	successLog('ü¶Ñ ÊûÑÂª∫ÊàêÂäü')
}

//ÂéãÁº©
const compressZip = async () => {
	successLog('üê≥ ÂºÄÂßãÂéãÁº©‚Ä¶‚Ä¶')
	try {
		await compressing.zip.compressDir(distDir, distZipPath)
		successLog('ü¶Ñ ÂéãÁº©ÊàêÂäü')
	} catch (error) {
		errorLog('‚ùó ÂéãÁº©Â§±Ë¥•')
		errorLog(error)
		process.exit()
	}
}

// ËøûÊé•ÊúçÂä°Âô®
const connectSSH = async () => {
	successLog('üê≥ ÂºÄÂßãËøûÊé•ÊúçÂä°Âô®‚Ä¶‚Ä¶')
	try {
		await SSH.connect({
			host: config['SERVER_HOST'],
			username: config['SSH_USER'],
			password: config['PASSWORD']
			// port: 22,
			// privateKey:'',ÂØÜÈí•ÂØπ
		})
		successLog('ü¶Ñ ËøûÊé•ÊúçÂä°Âô®ÊàêÂäü')
	} catch (error) {
		errorLog('‚ùó ËøûÊé•ÊúçÂä°Âô®Â§±Ë¥•,ËØ∑Ê£ÄÊü•ÈÖçÁΩÆ')
		errorLog(error)
	}
}

// ÊâßË°åsshÂëΩ‰ª§
const execSSH = async cmd => {
	let res = await SSH.execCommand(cmd, { cwd: config['PATH'] })
	if (res.code !== 0) {
		errorLog(`‚ùó ÊâßË°åÂëΩ‰ª§Â§±Ë¥•\n ${cmd} `)
	}
}

// Ê∏ÖÁêÜÊúçÂä°Âô®ÊóßÊñá‰ª∂
const cleanServerOldFile = async () => {
	const cmds = ['rm -rf *']
	await Promise.all(cmds.map(execSSH))
	successLog('ü¶Ñ Ê∏ÖÈô§ÊóßÊñá‰ª∂ÊàêÂäü')
}

// ‰∏ä‰º†Êñá‰ª∂Ëá≥ÊúçÂä°Âô®Âπ∂Ëß£Âéã
const uploadDistFile = async () => {
	try {
		successLog('ü¶Ñ ÂºÄÂßã‰∏ä‰º†Êñá‰ª∂Ëá≥ÊúçÂä°Âô®‚Ä¶‚Ä¶')
		await SSH.putFile(distZipPath, `${config['PATH']}/dist.zip`)
		const cmds = ['unzip dist.zip', `mv -f ${config['PATH']}/dist/* ${config['PATH']}/`, 'rm -rf dist dist.zip']
		for (const cmd of cmds) {
			await execSSH(cmd)
		}
		successLog('ü¶Ñ ‰∏ä‰º†Êñá‰ª∂ÊàêÂäü')
		// await Promise.all(cmds.map(it => execSSH(it)))
	} catch (error) {
		errorLog('‚ùó ‰∏ä‰º†Êñá‰ª∂Â§±Ë¥•')
		console.log(error)
	}
}
